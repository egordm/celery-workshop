[build-system]
build-backend = "hatchling.build"

requires = [ "hatchling" ]

[project]
name = "celery-workshop"
version = "0.1.0"
description = "Celery Basics Workshop"
readme = "README.md"
authors = [
  { name = "Egor Dmitriev", email = "egordmitriev2@gmail.com" },
]
requires-python = ">=3.13"
classifiers = [ "Programming Language :: Python :: 3 :: Only", "Programming Language :: Python :: 3.13" ]
dependencies = [
  "celery>=5.5.3",
  "sqlalchemy>=2.0.43",
]

[dependency-groups]
dev = [
  "celery-types>=0.23",
  "celery-workshop",
  "poethepoet>=0.37",
  "pyproject-fmt>=2.6",
  "pyright>=1.1.405",
  "pytest>=8.4.2",
  "ruff>=0.13",
]

[tool.hatch.build.targets.wheel]
packages = [ "src/celery_workshop" ]

[tool.ruff]
target-version = "py313"
line-length = 120
src = [
  "src",
]

output-format = "concise"
format.preview = true
lint.select = [ "ALL" ]
lint.ignore = [
  "COM812", # Conflicting rules (a), ruff itself suggest disabling them.
  "CPY001", # Reuse covers copyright checks.
  "D",      # All docstring rules
  "D203",   # Conflicting rules (a), ruff itself suggest disabling them.
  "D213",   # Conflicting rules (a), ruff itself suggest disabling them.
  "DOC",    # All docstring rules
  "EM101",  # do not enforce message in variable when raising an exception.
  "G004",   # Using f-strings for simplicity cause it's not production code
  "TC006",  # Let's not force quoting the first param of typing.cast
  "TRY003", # simplify exception messages
]

lint.per-file-ignores."./tests/*" = [
  "ARG",     # Unused function args -> fixtures nevertheless are functionally relevant...
  "D",       # All docstring rules
  "DOC",     # All docstring rules
  "E501",    # Line too long (test names can be descriptive)
  "FBT",     # Allow booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
  "PLR0913", # Pytests can have a lot of fixtures, ignore too many arguments
  "PLR0917", # Pytests can have a lot of fixtures, ignore too many arguments
  "PLR2004", # Magic value used in comparison
  "S101",    # asserts allowed in tests...
  "S311",    # Standard pseudo-random generators
  "SLF001",  # Allow private access in tests
]

lint.fixable = [ "ALL" ]
lint.flake8-annotations.allow-star-arg-any = true # *args and **kwargs are allowed to be Any
lint.flake8-annotations.suppress-dummy-args = true # do not type _ arguments/variables
lint.flake8-annotations.suppress-none-returning = true # do not require annotation if None is returned/there is no return
lint.isort.known-first-party = [
  "src",
  "tests",
] # Useful if ruff does not run from the actual root of the project and to import form tests
lint.pydocstyle.convention = "google"
lint.pylint.allow-dunder-method-names = [
  "__get_pydantic_core_schema__",
  "__pydantic_init_subclass__",
] # valid pydantic name
lint.pylint.max-args = 7 # the default of 5 is a bit limiting. 7 should be enough for nearly all cases
lint.preview = true

[tool.pyproject-fmt]
column_width = 120
indent = 2
max_supported_python = "3.13"

[tool.pytest.ini_options]
testpaths = [ "tests" ]
python_files = [ "test_*.py", "*_test.py" ]
addopts = [
  "--import-mode=importlib", # modern way to import tests
  "--strict-markers",        # Force defining marks here (in a markers setting) to prevent typos
]

[tool.pyright]
include = [
  "src/**/*.py",
  "tests/**/*.py",
]
typeCheckingMode = "strict"
reportPrivateImportUsage = false
reportMissingTypeStubs = false
reportPrivateUsage = false
reportUnusedExpression = false

[tool.poe.tasks.lint]
help = "Lint code (with ruff)"
cmd = 'ruff check --fix --show-fixes ${check:+ --no-fix} ${unsafe:+ --unsafe-fixes}'
args = [
  { name = "check", type = "boolean", help = "Does not correct files, only warns" },
  { name = "unsafe", type = "boolean", help = "Enables unsafe fixes, which may change the code in a way that is not reversible. Use with care." },
]

[tool.poe.tasks.format]
help = "Format code (with ruff)"
cmd = 'ruff format ${check:+ --diff}'
args = [ { name = "check", type = "boolean", help = "Does not correct files, only warns" } ]

[tool.poe.tasks.format-pyproject]
help = "Format pyproject.toml (with pyproject-fmt)"
cmd = 'pyproject-fmt ${check:+ --check} -n pyproject.toml'
args = [ { name = "check", type = "boolean", help = "Does not correct files, only warns" } ]

[tool.poe.tasks.lock]
help = "Asserts that dependencies are locked"
cmd = "uv lock --check"

[tool.poe.tasks.type]
help = "Check typing (with pyright)"
cmd = "pyright src"

[tool.poe.tasks.tests]
help = "Run pytest with xdist, marker filtering, and coverage"
cmd = "pytest ${markers:+ -m $markers}"
args = [
  { name = "markers", type = "string", default = "", help = "Only run tests matching the given pytest markers expression" },
]

[tool.poe.tasks.all]
help = "Run all CI calls"
control.expr = "check"                                                                       # There is no pass through option (yet?) so use a control expression to pass --check option to tasks when relevant
args = [ { name = "check", type = "boolean", help = "Does not correct files, only warns" } ]
# NB: ruff needs the linter (which will sort imports) to run before the formatter (which cannot sort imports).
switch = [
  { case = "check", sequence = [
    "lint --check",
    "format --check",
    "format-pyproject --check",
    "lock",
    "type",
    "tests",
  ], ignore_fail = "return_non_zero" },
  { sequence = [
    "lint",
    "format",
    "format-pyproject",
    "lock",
    "type",
    "tests",
  ], ignore_fail = "return_non_zero" },
]

[tool.uv.sources]
celery-workshop = { workspace = true }
